****************************************** TRANSITION TABLE for  i%f  ***********************************************
{'i': set([1])}
{'#': set([2])}
{'f': set([3])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  e%l%s%e  ***********************************************
{'e': set([1])}
{'#': set([2])}
{'l': set([3])}
{'#': set([4])}
{'s': set([5])}
{'#': set([6])}
{'e': set([7])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  w%h%i%l%e  ***********************************************
{'w': set([1])}
{'#': set([2])}
{'h': set([3])}
{'#': set([4])}
{'i': set([5])}
{'#': set([6])}
{'l': set([7])}
{'#': set([8])}
{'e': set([9])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  b%r%e%a%k  ***********************************************
{'b': set([1])}
{'#': set([2])}
{'r': set([3])}
{'#': set([4])}
{'e': set([5])}
{'#': set([6])}
{'a': set([7])}
{'#': set([8])}
{'k': set([9])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  c%o%n%t%i%n%u%e  ***********************************************
{'c': set([1])}
{'#': set([2])}
{'o': set([3])}
{'#': set([4])}
{'n': set([5])}
{'#': set([6])}
{'t': set([7])}
{'#': set([8])}
{'i': set([9])}
{'#': set([10])}
{'n': set([11])}
{'#': set([12])}
{'u': set([13])}
{'#': set([14])}
{'e': set([15])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  r%e%t%u%r%n  ***********************************************
{'r': set([1])}
{'#': set([2])}
{'e': set([3])}
{'#': set([4])}
{'t': set([5])}
{'#': set([6])}
{'u': set([7])}
{'#': set([8])}
{'r': set([9])}
{'#': set([10])}
{'n': set([11])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  v%o%i%d  ***********************************************
{'v': set([1])}
{'#': set([2])}
{'o': set([3])}
{'#': set([4])}
{'i': set([5])}
{'#': set([6])}
{'d': set([7])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  i%n%t  ***********************************************
{'i': set([1])}
{'#': set([2])}
{'n': set([3])}
{'#': set([4])}
{'t': set([5])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  c%h%a%r  ***********************************************
{'c': set([1])}
{'#': set([2])}
{'h': set([3])}
{'#': set([4])}
{'a': set([5])}
{'#': set([6])}
{'r': set([7])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  f%l%o%a%t  ***********************************************
{'f': set([1])}
{'#': set([2])}
{'l': set([3])}
{'#': set([4])}
{'o': set([5])}
{'#': set([6])}
{'a': set([7])}
{'#': set([8])}
{'t': set([9])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  b|a%b|a  ***********************************************
{'b': set([1])}
{'#': set([5])}
{'a': set([3])}
{'#': set([5])}
{'#': set([0, 2])}
{'#': set([10])}
{'b': set([7])}
{'#': set([11])}
{'a': set([9])}
{'#': set([11])}
{'#': set([8, 6])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  1|0%1|0  ***********************************************
{'1': set([1])}
{'#': set([5])}
{'0': set([3])}
{'#': set([5])}
{'#': set([0, 2])}
{'#': set([10])}
{'1': set([7])}
{'#': set([11])}
{'0': set([9])}
{'#': set([11])}
{'#': set([8, 6])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  1|0*%E%#|-|+%1|0%1|0*  ***********************************************
{'1': set([1])}
{'#': set([5])}
{'0': set([3])}
{'#': set([5])}
{'#': set([0, 2])}
{'#': set([4, 7])}
{'#': set([4, 7])}
{'#': set([8])}
{'E': set([9])}
{'#': set([18])}
{'#': set([11])}
{'#': set([15])}
{'-': set([13])}
{'#': set([15])}
{'#': set([10, 12])}
{'#': set([19])}
{'+': set([17])}
{'#': set([19])}
{'#': set([16, 14])}
{'#': set([24])}
{'1': set([21])}
{'#': set([25])}
{'0': set([23])}
{'#': set([25])}
{'#': set([20, 22])}
{'#': set([32])}
{'1': set([27])}
{'#': set([31])}
{'0': set([29])}
{'#': set([31])}
{'#': set([26, 28])}
{'#': set([33, 30])}
{'#': set([33, 30])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  +  ***********************************************
{'+': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  *  ***********************************************
{'*': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  -  ***********************************************
{'-': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  /  ***********************************************
{'/': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  |  ***********************************************
{'|': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  =  ***********************************************
{'=': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  !  ***********************************************
{'!': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  (  ***********************************************
{'(': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  )  ***********************************************
{')': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  {  ***********************************************
{'{': set([1])}
********************************************************************************************************************************

****************************************** TRANSITION TABLE for  }  ***********************************************
{'}': set([1])}
********************************************************************************************************************************

Words on line 0 : ['int', 'aa', '=', '00']
---------------------------------------------------------------------------------
MATCHED  :: int with token < INT, 1 > TOKEN INT LINE 1
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: aa with token < ID, 1 > TOKEN ID LINE 1
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 1 > TOKEN ASSIGNMENT LINE 1
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 1 > TOKEN CONST_INT LINE 1
---------------------------------------------------------------------------------
Words on line 1 : ['int', 'bb', '=', '10']
---------------------------------------------------------------------------------
MATCHED  :: int with token < INT, 2 > TOKEN INT LINE 2
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: bb with token < ID, 2 > TOKEN ID LINE 2
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 2 > TOKEN ASSIGNMENT LINE 2
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 10 with token < CONST_INT, 2 > TOKEN CONST_INT LINE 2
---------------------------------------------------------------------------------
Words on line 2 : ['int', 'ab']
---------------------------------------------------------------------------------
MATCHED  :: int with token < INT, 3 > TOKEN INT LINE 3
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: ab with token < ID, 3 > TOKEN ID LINE 3
---------------------------------------------------------------------------------
Words on line 3 : ['aa', '=', '10', '+', '00']
---------------------------------------------------------------------------------
MATCHED  :: aa with token < ID, 4 > TOKEN ID LINE 4
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 4 > TOKEN ASSIGNMENT LINE 4
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 10 with token < CONST_INT, 4 > TOKEN CONST_INT LINE 4
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: + with token < PLUS, 4 > TOKEN PLUS LINE 4
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 4 > TOKEN CONST_INT LINE 4
---------------------------------------------------------------------------------
Words on line 4 : ['bb', '=', '10', '*', '00']
---------------------------------------------------------------------------------
MATCHED  :: bb with token < ID, 5 > TOKEN ID LINE 5
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 5 > TOKEN ASSIGNMENT LINE 5
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 10 with token < CONST_INT, 5 > TOKEN CONST_INT LINE 5
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: * with token < MUL, 5 > TOKEN MUL LINE 5
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 5 > TOKEN CONST_INT LINE 5
---------------------------------------------------------------------------------
Words on line 5 : ['ab', '=', '10', '-', '00']
---------------------------------------------------------------------------------
MATCHED  :: ab with token < ID, 6 > TOKEN ID LINE 6
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 6 > TOKEN ASSIGNMENT LINE 6
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 10 with token < CONST_INT, 6 > TOKEN CONST_INT LINE 6
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: - with token < MINUS, 6 > TOKEN MINUS LINE 6
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 6 > TOKEN CONST_INT LINE 6
---------------------------------------------------------------------------------
Words on line 6 : ['return', 'ab', 'aa']
---------------------------------------------------------------------------------
MATCHED  :: return with token < RET, 7 > TOKEN RET LINE 7
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: ab with token < ID, 7 > TOKEN ID LINE 7
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: aa with token < ID, 7 > TOKEN ID LINE 7
---------------------------------------------------------------------------------
Words on line 7 : ['if', 'aa', '=', '00']
---------------------------------------------------------------------------------
MATCHED  :: if with token < IF, 8 > TOKEN IF LINE 8
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: aa with token < ID, 8 > TOKEN ID LINE 8
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 8 > TOKEN ASSIGNMENT LINE 8
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 8 > TOKEN CONST_INT LINE 8
---------------------------------------------------------------------------------
Words on line 8 : ['break']
---------------------------------------------------------------------------------
MATCHED  :: break with token < BR, 9 > TOKEN BR LINE 9
---------------------------------------------------------------------------------
Words on line 9 : ['else']
---------------------------------------------------------------------------------
MATCHED  :: else with token < ELSE, 10 > TOKEN ELSE LINE 10
---------------------------------------------------------------------------------
Words on line 10 : ['continue']
---------------------------------------------------------------------------------
MATCHED  :: continue with token < CONT, 11 > TOKEN CONT LINE 11
---------------------------------------------------------------------------------
Words on line 11 : ['void', 'ba', '(', ')']
---------------------------------------------------------------------------------
MATCHED  :: void with token < VOID, 12 > TOKEN VOID LINE 12
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: ba with token < ID, 12 > TOKEN ID LINE 12
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: ( with token < LPAREN, 12 > TOKEN LPAREN LINE 12
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: ) with token < RPAREN, 12 > TOKEN RPAREN LINE 12
---------------------------------------------------------------------------------
Words on line 12 : ['{']
---------------------------------------------------------------------------------
MATCHED  :: { with token < LBRACE, 13 > TOKEN LBRACE LINE 13
---------------------------------------------------------------------------------
Words on line 13 : ['ba', '=', '00']
---------------------------------------------------------------------------------
MATCHED  :: ba with token < ID, 14 > TOKEN ID LINE 14
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: = with token < ASSIGNMENT, 14 > TOKEN ASSIGNMENT LINE 14
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
MATCHED  :: 00 with token < CONST_INT, 14 > TOKEN CONST_INT LINE 14
---------------------------------------------------------------------------------
Words on line 14 : ['}']
---------------------------------------------------------------------------------
MATCHED  :: } with token < RBRACE, 15 > TOKEN RBRACE LINE 15
---------------------------------------------------------------------------------

``````````````````````````````````````````````````````````````````````````````````````````````````
                                       SYMBOL TABLE                                               
``````````````````````````````````````````````````````````````````````````````````````````````````
Lexeme	:	aa
Token	:	ID
Line	:	1
Line	:	4
Line	:	7
Line	:	8
*******************************************************************************************
Lexeme	:	10
Token	:	CONST_INT
Line	:	2
Line	:	4
Line	:	5
Line	:	6
*******************************************************************************************
Lexeme	:	00
Token	:	CONST_INT
Line	:	1
Line	:	4
Line	:	5
Line	:	6
Line	:	8
Line	:	14
*******************************************************************************************
Lexeme	:	ab
Token	:	ID
Line	:	3
Line	:	6
Line	:	7
*******************************************************************************************
Lexeme	:	return
Token	:	RET
Line	:	7
*******************************************************************************************
Lexeme	:	ba
Token	:	ID
Line	:	12
Line	:	14
*******************************************************************************************
Lexeme	:	bb
Token	:	ID
Line	:	2
Line	:	5
*******************************************************************************************
Lexeme	:	int
Token	:	INT
Line	:	1
Line	:	2
Line	:	3
*******************************************************************************************
Lexeme	:	(
Token	:	LPAREN
Line	:	12
*******************************************************************************************
Lexeme	:	+
Token	:	PLUS
Line	:	4
*******************************************************************************************
Lexeme	:	*
Token	:	MUL
Line	:	5
*******************************************************************************************
Lexeme	:	-
Token	:	MINUS
Line	:	6
*******************************************************************************************
Lexeme	:	}
Token	:	RBRACE
Line	:	15
*******************************************************************************************
Lexeme	:	else
Token	:	ELSE
Line	:	10
*******************************************************************************************
Lexeme	:	break
Token	:	BR
Line	:	9
*******************************************************************************************
Lexeme	:	)
Token	:	RPAREN
Line	:	12
*******************************************************************************************
Lexeme	:	continue
Token	:	CONT
Line	:	11
*******************************************************************************************
Lexeme	:	{
Token	:	LBRACE
Line	:	13
*******************************************************************************************
Lexeme	:	=
Token	:	ASSIGNMENT
Line	:	1
Line	:	2
Line	:	4
Line	:	5
Line	:	6
Line	:	8
Line	:	14
*******************************************************************************************
Lexeme	:	void
Token	:	VOID
Line	:	12
*******************************************************************************************
Lexeme	:	if
Token	:	IF
Line	:	8
*******************************************************************************************
